name: Build Kotlin Project

# 觸發條件
on:
  push:
    branches:
      - main # 當 main 分支有新的推送時觸發
    tags:
      - v* # 當有新的標籤時觸發
  schedule:
    - cron: '0 0 * * 0' # 每週日 00:00 UTC 時觸發 (台灣是 UTC+8，所以是每週日 08:00)
  workflow_dispatch: # 手動觸發工作流程

jobs: # 工作流程中的工作
  build: # 工作流程名稱
    runs-on: ubuntu-latest # 運行工作流程的虛擬機器環境 (ubuntu-latest, macos-latest, windows-latest)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # 簽出代碼

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' # 設置 JDK 版本
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # 給予執行權限

      - name: Build with Gradle
        run: |
          # ./gradlew build # 執行 Gradle 構建命令

          ./gradlew assembleDebug # 執行 Gradle 構建命令
          ls -l app/build/outputs/apk/debug/ # 列出 APK 文件
          DEBUG_APK_FILE=$(find 'app/build/outputs/apk/debug/' -name '*.apk' | head -n 1)
          echo "DEBUG_APK_PATH=$DEBUG_APK_FILE" >> $GITHUB_ENV # 將 APK 文件路徑寫入環境變數
          echo "DEBUG_APK=$(basename $DEBUG_APK_FILE)" >> $GITHUB_ENV # 將 APK 文件名稱寫入環境變數

          ./gradlew assembleRelease # 執行 Gradle 構建命令
          ls -l app/build/outputs/apk/release/ # 列出 APK 文件
          RELEASE_APK_FILE=$(find 'app/build/outputs/apk/release/' -name '*.apk' | head -n 1)
          echo "RELEASE_APK_PATH=$RELEASE_APK_FILE" >> $GITHUB_ENV # 將 APK 文件路徑寫入環境變數
          echo "RELEASE_APK=$(basename $RELEASE_APK_FILE)" >> $GITHUB_ENV # 將 APK 文件名稱寫入環境變數

      # 上傳工作流中的檔案到運行紀錄中，以便在 GitHub UI 中查看下載，或是在其他工作流程中使用
      - name: Upload Artifact (Debug APK)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEBUG_APK }} # 上傳的文件名稱
          path: ${{ env.DEBUG_APK_PATH }} # 上傳的文件路徑

      - name: Upload Artifact (Release APK)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_APK }} # 上傳的文件名稱
          path: ${{ env.RELEASE_APK_PATH }} # 上傳的文件路徑

  Release: # 工作流程名稱
    runs-on: ubuntu-latest # 運行工作流程的虛擬機器環境 (ubuntu-latest, macos-latest, windows-latest)
    needs: build # 需要 build 工作流程執行完畢後才能執行

    steps:
      # 將所有存在運行紀錄中的檔案下載到工作流程中，檔案會存在工作流程的工作目錄中 (${{ github.workspace }})
      - name: Download All Artifacts (Debug APK, Release APK)
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R # 列出資料夾結構

      - name: Publish Release
        # 當推送的標籤是以 refs/tags/v 開頭時執行
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: '${{ env.DEBUG_APK }},${{ env.RELEASE_APK }}'
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false
          name: Release ${{ github.ref_name }} APK # 發布的名稱
          body: |
            Release ${{ github.ref_name }} APK
          tag: ${{ github.ref_name }}
